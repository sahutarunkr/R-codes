rules<-getConds(tree)
print(rules)
View(iris)
train=sample(120,30)
library("randomForest", lib.loc="~/R/win-library/3.4")
?randomForest
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=2,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=1,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=5,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=3,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[train,],type='class')
table(rf.iris.pred,iris[train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[train,],type='class')
table(rf.iris.pred,iris[train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=1,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[train,],type='class')
table(rf.iris.pred,iris[train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=2,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[train,],type='class')
table(rf.iris.pred,iris[train,]$Species)
myData=iris
myData$Species=as.factor(myData$Species)
View(myDat)
View(myData)
newiris <- iris
summary(newiris)
# There are three species of Iris, so we expect this dataset
# should work well with 3 clusters. Let's remove the species
# label.
newiris$Species <- NULL
# K means is easy to do in R - you don't need a special package
# But we do need to specify the number of clusters
kc <- kmeans(newiris, 3)
kc
# We can access the available components as kc$xxx
kc$totss
kc$withinss
kc$tot.withinss
kc$betweenss
# How well did we do? Let's compare the results of the clustering
# to the species value (which in this case, we know)
table(iris$Species, kc$cluster)
kc$cluster
table(iris$Species, kc$cluster)
table(iris$Species, kc$cluster)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
train=sample(100,50)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=3,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
View(mydata)
View(myData)
train=sample(110,40)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=3,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=3,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=3,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=3,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=3,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=3,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
train=sample(130,20)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=3,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=3,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=3,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=3,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=3,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
myData
myData[myData$Species=="virginica"]=3
myData[Species=="virginica"]=3
myData[myData$Species=="virginica"]=3
myData[myData$Species=="virginica",]=3
myData[Species=="virginica",]=3
myData[myData$Species=="virginica",]=3
myData[myData$Species=="virginica",]
myData$Species=as.factor(myData$Species)
myData[myData$Species=="virginica",]
myData[myData$Species!=0]
myData[myData$Species!=0,]
myData=iris
myData[myData$Species!=0,]
myData[myData$Species=="virginica",]$Species=3
myData[myData$Species=="virginica",]
myData=iris
myData[myData$Species=="virginica",]
myData[myData$Species=="virginica",]$Species
myData[myData$Species=="virginica",]$Species=3
myData[myData$Species=="virginica",]$Species
myData=iris
myData$Species=ifelse(myData$Species=="virginica",3,myData$Species)
View(myData)
myData=iris
View(myData)
myData$Species=ifelse(myData$Species=="virginica",3,myData$Species)
View(myData)
table(myData$Species,iris$Species)
table(myData$Species,iris$Species)
table(myData$Species,iris$Species)
table(myData$Species,iris$Species)
table(myData$Species,iris$Species)
table(myData$Species,iris$Species)
install.packages("xgboost")
library("xgboost", lib.loc="~/R/win-library/3.4")
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
train <- agaricus.train
test <- agaricus.test
train
View(train)
typeof(train)
train=as.data.frame(trian)
train=as.data.frame(train)
train=data.frame(train)
names(train)
View(train$data)
View(train$label)
names(train$data)
View(train$data)
?gbm
install.packages("gbm")
library("gbm", lib.loc="~/R/win-library/3.4")
?gbm
install.packages("DMwR")
library("DMwR", lib.loc="~/R/win-library/3.4")
?SMOTE
class(tarin$data)
class(train$data)
class(train$label)
o=as.matrix(train$data)
View(o)
iris
?gbm
View(myData)
random
bank.additional.full <- read.csv("C:/Users/tarun/OneDrive - The University of Texas at Dallas/Semester 4/R/DataSets/Lecture-28-Data/bank-additional-full.csv", sep=";")
View(bank.additional.full)
myData = bank.additional.full
summary(myData)
# We need to do some cleanup.
myData$default = NULL
myData$duration = NULL
myData$nr.employed = NULL
train = sample(1:41188, 35000)
# First we build a random forest - attach randomForest package
# This takes a second ...
rf.bank = randomForest(y~., data=myData, subset=train, mtry=4)
rf.pred = predict(rf.bank, myData[-train,],type="class")
table(rf.pred, myData[-train,]$y)
mean(rf.pred == myData[-train,]$y)
sample
sample(2,3)
sample(2,2)
sample(20,2)
sample(20,2)
sample(20,2)
sample(20,2)
mean(myData[-train,]$y == "no")
myData$target = ifelse(myData$y == "no",0,1)
summary(myData$target)
# Attach the 'gbm' package
?gbm
boost.bank = gbm(target~. -y, data=myData[train,], distribution="bernoulli", n.trees=500, shrinkage=.01)
boost.probs = predict(boost.bank,newdata=myData[-train,],n.trees=500, type="response")
head(boost.probs)
dim(myData[-train,])
boost.pred = rep("no",6188)
boost.pred[boost.probs>.5]="yes"
table(boost.pred,myData[-train,]$y)
boost.bank = gbm(target~. -y, data=myData[train,], distribution="adaboost", n.trees=500, shrinkage=.01)
boost.probs = predict(boost.bank,newdata=myData[-train,],n.trees=500, type="response")
boost.pred = rep("no",6188)
boost.pred[boost.probs>.5]="yes"
table(boost.pred,myData[-train,]$y)
best.iter=gbm.perf(boost.bank,method = "OOB")
print(best.iter)
myData_2 <- SMOTE(y~ . -target, myData[train,], perc.over = 100, perc.under=200)
myData_2$target = ifelse(myData_2$y == "no",0,1)
?xgboost
myData=iris
myData$Species=ifelse(myData$Species="setosa",1,myData$Species)
myData$Species=ifelse(myData$Species=="setosa",1,myData$Species)
View(myData)
train=sample(150,100)
bstSparse <- xgboost(data = myData[train,-"Species"], label = myData[train,"Species"], max.depth = 2, eta = 1, nthread = 2, nround = 2, objective = "binary:logistic")
View(myData[train,-"Species"])
(myData[train,-"Species"])
(myData[train,-5])
bstSparse <- xgboost(data = myData[train,-5], label = myData[train,"Species"], max.depth = 2, eta = 1, nthread = 2, nround = 2, objective = "binary:logistic")
bstSparse <- xgboost(data = myData[train,-5], label = myData[train,5], max.depth = 2, eta = 1, nthread = 2, nround = 2, objective = "binary:logistic")
bstSparse <- xgboost(data = as.matrix(myData[train,-5]), label = myData[train,5], max.depth = 2, eta = 1, nthread = 2, nround = 2, objective = "binary:logistic")
myData%>%View
View%>%myData
myData %>% View()
View() %>% myData
iris %>% View()
install.packages("magrittr")
library(magrittr)
iris %>% View()
install.packages("magrittr")
iris %>% View()
library("magrittr", lib.loc="~/R/win-library/3.4")
iris %>% View()
myData %>% View()
train=sample(150,100)
boost.bank = gbm(Species~., data=myData[train,], distribution="adaboost", n.trees=500, shrinkage=.01)
library("gbm", lib.loc="~/R/win-library/3.4")
boost.bank = gbm(Species~., data=myData[train,], distribution="adaboost", n.trees=500, shrinkage=.01)
bag.bands=randomForest(Species~.data=myData,subset=train,mtry=4,importance=TRUE)
bag.bands=randomForest(Species~.,data=myData,subset=train,mtry=4,importance=TRUE)
library("randomForest", lib.loc="~/R/win-library/3.4")
library("randomForest", lib.loc="~/R/win-library/3.4")
bag.bands=randomForest(Species~.,data=myData,subset=train,mtry=4,importance=TRUE)
bag.pred=predict(bag.bands,myData[-train],type="class")
bag.pred=predict(bag.bands,myData[-train,],type="class")
table(bag.pred,myData[-train,]$Species)
bag.bands=randomForest(Species~.,data=myData,subset=train,mtry=4,importance=TRUE)
myData$Species=as.factor(myData$Species)
bag.bands=randomForest(Species~.,data=myData,subset=train,mtry=4,importance=TRUE)
bag.pred=predict(bag.bands,myData[-train,],type="class")
bag.bands=randomForest(Species~.,data=myData,subset=train,mtry=4,importance=TRUE)
table(bag.pred,myData[-train,]$Species)
bag.bands=randomForest(Species~.,data=myData,subset=train,mtry=4,importance=TRUE)
bag.pred=predict(bag.bands,myData[-train,],type="class")
table(bag.pred,myData[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
table(bag.pred,myData[-train,]$Species)
train=sample(150,130)
table(bag.pred,myData[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
train=sample(150,90)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
train=sample(150,30)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
train=sample(150,140)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
train=sample(150,120)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=2,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
train=sample(150,100)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=2,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=1,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
train=sample(150,140)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=2,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
train=sample(150,40)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=2,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
train=sample(150,90)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=2,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=1,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=1,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
train=sample(150,60)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=1,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
train=sample(150,130)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=1,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
train=sample(150,50)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=1,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=1,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=1,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=1,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=1,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=1,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=1,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=1,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
install.packages("adabag")
library("adabag", lib.loc="~/R/win-library/3.4")
rf.iris=randomForest(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris=boosting(Species~.,data=iris,subset=train,mtry=4,impotance=TRUE)
?boosting
rf.iris=boosting(Species~.,data=iris[train,],boos=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris.pred
rf.iris.pred$confusion
train=sample(150,100)
rf.iris=boosting(Species~.,data=iris[train,],boos=TRUE)
rf.iris.pred=predict(rf.iris,iris[-train,],type='class')
table(rf.iris.pred,iris[-train,]$Species)
rf.iris.pred$confusion
rf.iris=boosting(Species~.,data=iris[train,])
rf.iris.pred=predict(object=rf.iris,iris[-train,],type='class')
rf.iris$confusion
rf.iris=boosting(Species~.,data=iris[train,],boos=TRUE)
rf.iris=boosting(Species~.,data=iris[train,])
rf.iris.pred=predict(object=rf.iris,iris[-train,],type='class')
rf.iris.pred$confusion
train=sample(150,130)
rf.iris=boosting(Species~.,data=iris[train,])
rf.iris.pred=predict(object=rf.iris,iris[-train,],type='class')
rf.iris.pred$confusion
set.seed(100)
train=sample(150,50)
train
set.seed(150)
train=sample(150,50)
set.seed(150)
train=sample(150,50)
train
set.seed(10)
train=sample(150,50)
set.seed(10)
train=sample(150,50)
train
set.seed(10)
train=sample(150,50)
train
train=sample(150,50)
train
train=sample(150,50)
train
train=sample(150,50)
train
train=sample(150,50)
train
set.seed(10)
train=sample(150,50)
train
table(rf.iris.pred,iris[-train,]$Species)
clear
Kyphosis
install.packages("Rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
a=c(1,2,3,4,5,6,7,8,9,10,11)
a
acf(a)
pacf(a)
pacf(a)
acf(a)
a=1:1000
acf(a)
a=1:30
a=1:30
acf(a)
a=1:1000
a=1:1000
acf(a)
pacf(a)
a=c(1,2,3,4,5,6,7,8,9,10,11)
pacf(a)
a=1:1000
pacf(a)
a=1:1000
pacf(a)
fibonacci(4)
install.packages("fibonacci")
install.packages("numbers")
library("numbers", lib.loc="~/R/win-library/3.4")
fibonacci(5)
fibonacci(5,series=TRUE)
fibonacci(5,sequence=TRUE)
acf(fibonacci(10,series=TRUE))
a=fibonacci(10,sequence=TRUE)
a
acf(a)
pacf(a)
b=c(1,3,2,6,4,12,8,24,16)
acf(b)
pacf(b)
b=c(1,-3,2,-6,4,-12,8,-24,16)
pacf(b)
c=c(1,-4,3,-2,5,0,7,2,9)
pacf(c)
acf(c)
d=c(1,-4,2,-5,3,-6,4,-7,5,-8,6)
acf(d)
pacf(d)
View(rf.iris.pred)
