# First we load in the Car Worth - Train.CSV Data file

View(Car_Worth_Train)
myData = Car_Worth_Train

# How to summarize data in a data frame

summary(myData)

# Notice the categorical variables are being interpretted as chars
# Trick to convert ... only need if loaded in with read_csv

# myData = as.data.frame(unclass(myData))
# summary(myData)

# Now we have category counts for the category variables

dim(myData)
head(myData)
names(myData)
str(myData)
myData[,3]
myData[3,]
myData[,1]

# Notice that the above gives the data in the row/column. 
# We can also access this data in other ways ...

myData[["Price"]]
myData$Price
mean(myData[["Price"]])
sd(myData$Price)
boxplot(myData[,1])

# Next we load in the Ames Housing Data

View(AmesHousing)

# myData = as.data.frame(unclass(AmesHousing))
myData = AmesHousing
dim(myData)
summary(myData)
names(myData)
str(myData)

# If a variable has many NAs, we should probably remove or combine with another variable

myData$Misc.Feature=NULL
myData$Fence=NULL
myData$Pool.QC=NULL
myData$Fireplace.Qu=NULL
myData$Alley=NULL

# We can now remove any records that have NAs

myDataClean = na.omit(myData)
dim(myDataClean)
summary(myDataClean)

# Let's plot the data - first attach the dataframe to make it easier

attach(myDataClean)
plot(SalePrice~Mo.Sold)
plot(SalePrice~Pool.Area)
plot(SalePrice~Garage.Area)
plot(MS.Zoning~Lot.Shape)

# Here we change Overall.cond to an ordinal

summary(myDataClean$Overall.Cond)
myDataClean$Overall.Cond = as.ordered(myDataClean$Overall.Cond)
summary(myDataClean$Overall.Cond)

# If you already have the MASS package installed, skip the next step

install.packages("MASS", dependencies = TRUE)
# Now attach the MASS library in your Packages window

# These are the datasets that come with R

data()

# Here we define a simple vector of data points

x = c(1,2,3,4,5,6)

# Here we define a function that returns the mean of a dataset

f1= function(X){
y = mean(X)
return(y)
}
f1(x)

# Here we explore some of the datasets included in R

head(rock)
head(sleep)
?sleep
summary(sleep)
plot(sleep$extra~sleep$group)
summary(sunspots)
sunspots
?sunspots
plot(sunspots, main = "sunspots data", xlab = "Year",
ylab = "Monthly sunspot numbers")

#Let's return to the Car Worth dataset ...
View(Car_Worth_Train)
myCarData =Car_Worth_Train
summary(myCarData)
# myCarData = as.data.frame(unclass(myCarData))
# summary(myCarData)
attach(myCarData)
plot(Model~Make)
plot(Make~Model)

?trees
plot(trees)

# How to select specific columns from a dataset ...

newData = myCarData[,c("Price","Make")]
summary(newData)
newData = myCarData[1:100,c("Price","Make")]
summary(newData)
newData = myCarData[myCarData$Price>10000,c("Price","Make")]
summary(newData)


# Load in the movies.txt file - note I changed this file to
# make it tab delimited (the original used "::").
# Also, there are no column names.

# Rename columns

colnames(movies)=c("MovieID","Title","Genre")
dim(movies)

# Read in the Ratings.dat file - note this still has "::"
# as a delimiter, and this introduces some blank cols

ratings[,6]=NULL
ratings[,4]=NULL
ratings[,2]=NULL

colnames(ratings)=c("UserID","MovieID","Rating","Timestamp")
dim(ratings)

# Now merge based on movieID

newRanks = merge(ratings,movies,by="MovieID")
head(newRanks)

# Scrape an html with rvest

library("rvest")
url <- "http://en.wikipedia.org/wiki/List_of_U.S._states_and_territories_by_population"
population <- url %>%
  read_html() %>%
  html_nodes(xpath='//*[@id="mw-content-text"]/div/table[1]') %>%
  html_table()
population <- population[[1]]

head(population)
dim(population)


# Another example

url <- "http://www.ncaa.com/stats/basketball-men/d1/current/team/151"
population <- url %>%
  read_html() %>%
  html_nodes(xpath='//*[@id="block-system-main"]/div/div[5]/table') %>%
  html_table()
population <- population[[1]]

