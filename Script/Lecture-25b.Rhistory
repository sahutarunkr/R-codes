# We will do a content based filtering on another MovieLens
# dataset(s)
# Load in "movies.csv" and "ratings.csv" - use read.csv!

# Again we will shrink the datasets for time considerations

movies = movies[movies$movieId<500,]
dim(movies)
ratings = ratings[ratings$movieId<500,]
dim(ratings)
summary(movies)
summary(ratings)

# The attributes we will use are movie genres - first we need
# to break these out

genres <- as.data.frame(movies$genres, stringsAsFactors=FALSE)

# Attach the "data.table" package
genres2 <- as.data.frame(tstrsplit(genres[,1], '[|]', type.convert=TRUE), stringsAsFactors=FALSE)
colnames(genres2) <- c(1:6)
head(genres2)

# If we know all the genres, we can create a binary matrix
# which (for each movie) will indicate if a genre applies.
# This will have a column for each genre (6 total) and a
# row for each movie

genre_list <- c("Action", "Adventure", "Animation", "Children", "Comedy", "Crime","Documentary", "Drama", "Fantasy","Film-Noir", "Horror", "Musical", "Mystery","Romance","Sci-Fi", "Thriller", "War", "Western")

# Next we create an empty (0) matrix, set the first row to
# the genre list, and then set the column names to the 
# genre list
genre_matrix <- matrix(0,448,18) 
genre_matrix[1,] <- genre_list 
colnames(genre_matrix) <- genre_list 

# Now we fill in the matrix - for each movie, we put a '1'
# in if the genre is indicated for this movie
for (i in 1:nrow(genres2)) {
for (c in 1:ncol(genres2)) {
genmat_col = which(genre_matrix[1,] == genres2[i,c])
genre_matrix[i+1,genmat_col] <- 1
}
}

# We convert this to a dataframe and discard the first row,
# which was only used to identify genres
genre_matrix2 <- as.data.frame(genre_matrix[-1,], stringsAsFactors=FALSE)

# We need to convert the values to integers - they are 
# currently chars 
for (c in 1:ncol(genre_matrix2)) {
genre_matrix2[,c] <- as.integer(genre_matrix2[,c])
} 
head(genre_matrix2)

# Now we need a user profile, so we can recommend movies with
# genres the user will like. First we turn the ratings
# dataset into a binary rating
binaryratings <- ratings
for (i in 1:nrow(binaryratings)){
if (binaryratings[i,3] > 3){
binaryratings[i,3] <- 1
}
else{
binaryratings[i,3] <- -1
}
}

# We will use dcast() again to get a matrix which shows
# the ratings for each movie by user. We will convert
# NAs (since not all users rated all movies) to '0'
# Atach the "reshape2" package
binaryratings2 <- dcast(binaryratings, movieId~userId, value.var = "rating", na.rm=FALSE)
for (i in 1:ncol(binaryratings2)){
binaryratings2[which(is.na(binaryratings2[,i]) == TRUE),i] <- 0
}

# We now remove the movieID column - rows are movieIDs, columns
# are userIDS
binaryratings2 = binaryratings2[,-1] 
dim(binaryratings2)
head(binaryratings2)

# To get the user profile, we will take a dot product of
# each column in the genre matrix with the column in the binary
# rating matrix - this will give us an indication of which
# genres this user prefers
dim(genre_matrix2)
dim(binaryratings2)

# We have 447 movies, 656 users, and 18 genres
# For each movie we have a list of genres that apply and a rating
# from the users that rated it. Taking the columns of the rating
# matrix and doing an inner product into the columns of the
# genre matrix, we will get a matrix that shows how each user
# rates the genres. We can then use this to suggest movies
# based on genre for the user. This basically comes down to
# multiplying the transpose of the genre matrix into the rating
# matrix. 
result = matrix(0,18,656)
for (c in 1:ncol(binaryratings2)){
for (i in 1:ncol(genre_matrix2)){
temp <- sum((genre_matrix2[,i]) * (binaryratings2[,c]))
if (temp > 0){
result[i,c] <- 1
}
}
}
result[,1]
result[,2]
dim(result)

# We can now take a user's profile, attach it to the genre
# matrix, and find movies that are similar to the profile.
usrprofile = result[,2]
sim_mat <- rbind.data.frame(usrprofile, genre_matrix2)
sim_mat <- data.frame(lapply(sim_mat,function(x){as.integer(x)})) 

# Attach the proxy"package
sim_results <- dist(sim_mat, method = "Jaccard")
class(sim_results)
dim(as.matrix(sim_results))
sr = as.data.frame(as.matrix(sim_results))
dim(sr)
min(sr[1,])
sr[1,1]
sr[1,1]=2
min(sr[1,])
sr_1 = sr[1,]
sr2 = sort(sr_1, decreasing = TRUE)
sr2

# We need the colnames, as these will give us the movie IDs
sr3 = sr2[1,1:10]
sr3
colnames(sr3)

# Finally, we select the movies
movies[movies$movieId %in% colnames(sr3),]

# The recommended list (except for the first movie) is not
# great - perhaps we need to be more careful in constructing
# the user profile!
